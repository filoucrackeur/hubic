<?php
namespace Filoucrackeur\Hubic\Controller\Backend;

use Filoucrackeur\Hubic\Domain\Model\Account;
use Filoucrackeur\Hubic\Domain\Repository\AccountRepository;
use Filoucrackeur\Hubic\Service\ClientUtility;
use TYPO3\CMS\Core\Utility\GeneralUtility;
use TYPO3\CMS\Extbase\Mvc\Controller\ActionController;
use TYPO3\CMS\Extbase\Utility\DebuggerUtility;

class AccountController extends ActionController
{
    /**
     * @var ClientUtility $client
     */
    protected $client;

    /**
     * @var AccountRepository $accountRepository
     */
    protected $accountRepository;


    public function initializeAction()
    {
        parent::initializeAction(); // TODO: Change the autogenerated stub

        /* @var AccountRepository $accountRepository */
        $this->accountRepository = $this->objectManager->get('Filoucrackeur\Hubic\Domain\Repository\AccountRepository');

        /* @var ClientUtility $client */
        $this->client = GeneralUtility::makeInstance(ClientUtility::class);
    }


    public function indexAction()
    {
        $accounts = $this->accountRepository->findAll();
        $this->view->assign('accounts', $accounts);
    }

    public function showAction(Account $account){

        if($account->getAccessToken()){

            $clientAccount = $this->client->getAccount();
            $clientAccountQuota = $this->client->getAccountQuota();
            $agreement = $this->client->getAgreement();

            $this->view->assignMultiple([
                'account' => $account,
                'clientAccount' => $clientAccount,
                'clientAccountQuota' => $clientAccountQuota,
                'agreement' => $agreement
            ]);
        } else {
            $this->view->assign('account', $account);
        }
    }

    public function authenticationRequestAction(Account $account) {
        $this->redirectToUri($this->client->getAuthorizationRequestUrl($account));
    }

    public function authenticationResponseAction(Account $account) {
        DebuggerUtility::var_dump($account);
        die();

        /* @var \TYPO3\CMS\Extbase\Persistence\Generic\PersistenceManager $pm */
        $pm = $this->objectManager->get('TYPO3\CMS\Extbase\Persistence\Generic\PersistenceManager');
        $account->setAccessToken();
        $pm->update($account);
        $pm->persistAll();

        $this->addFlashMessage('Token successfully added', 'Authentication request', \TYPO3\CMS\Core\Messaging\AbstractMessage::OK);
        $this->redirect('show','','',['account' => $account]);
    }
}
